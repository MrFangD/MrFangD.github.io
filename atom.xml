<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>全脂老猫</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-09T09:16:17.722Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>全脂老猫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cddc</title>
    <link href="http://example.com/2021/03/10/Python%E6%95%99%E7%A8%8B(%E5%9B%9B)%EF%BC%9A%E5%88%97%E8%A1%A8/"/>
    <id>http://example.com/2021/03/10/Python%E6%95%99%E7%A8%8B(%E5%9B%9B)%EF%BC%9A%E5%88%97%E8%A1%A8/</id>
    <published>2021-03-09T17:16:17.000Z</published>
    <updated>2021-03-09T09:16:17.722Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python教程(三)：注释与python之禅</title>
    <link href="http://example.com/2021/03/07/Python%E6%95%99%E7%A8%8B(%E4%B8%89)%EF%BC%9A%E6%B3%A8%E9%87%8A%E4%B8%8Epython%E4%B9%8B%E7%A6%85/"/>
    <id>http://example.com/2021/03/07/Python%E6%95%99%E7%A8%8B(%E4%B8%89)%EF%BC%9A%E6%B3%A8%E9%87%8A%E4%B8%8Epython%E4%B9%8B%E7%A6%85/</id>
    <published>2021-03-06T22:01:29.000Z</published>
    <updated>2021-03-09T09:14:09.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三章-注释以及python之禅"><a href="#第三章-注释以及python之禅" class="headerlink" title="第三章 注释以及python之禅"></a>第三章 注释以及python之禅</h2><h3 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h3><p>​    注释的作用：确保对模块、函数、方法和行内注释使用正确的风格</p><p>​    Python中的注释分为单行注释和多行注释；</p><p>​    Python的单行注释以 <strong>#</strong> 开头，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line">print(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">#这也是一个注释</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello</span><br></pre></td></tr></table></figure><p>​    多行注释用三个单引号 ‘’’ 或者三个双引号””” 将注释括起来，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是一个多行注释，三个单引号</span></span><br><span class="line"><span class="string">这是一个多行注释，三个单引号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;hello</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一个多行注释，三个双引号</span></span><br><span class="line"><span class="string">这是一个多行注释，三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">print(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;hello</span><br></pre></td></tr></table></figure><h3 id="3-2-Python之禅"><a href="#3-2-Python之禅" class="headerlink" title="3.2 Python之禅"></a>3.2 Python之禅</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行此命令将显示由Tim Peters编写的&#x27;Zen Of Python(pyhton之禅)&#x27;.</span></span><br><span class="line"><span class="string">这是Python中的设计哲学，每个有追求的Python程序员都应谨记于心</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"> </span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than <span class="built_in">complex</span>.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">&#x27;t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">&#x27;s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">优美胜于丑陋。</span></span><br><span class="line"><span class="string">显式胜于隐式。</span></span><br><span class="line"><span class="string">简单胜于复杂。</span></span><br><span class="line"><span class="string">复杂胜于难懂。</span></span><br><span class="line"><span class="string">扁平胜于嵌套。</span></span><br><span class="line"><span class="string">分散胜于密集。</span></span><br><span class="line"><span class="string">可读性应当被重视。</span></span><br><span class="line"><span class="string">尽管实用性会打败纯粹性，特例也不能凌驾于规则之上。</span></span><br><span class="line"><span class="string">除非明确地使其沉默，错误永远不应该默默地溜走。</span></span><br><span class="line"><span class="string">面对不明确的定义，拒绝猜测的诱惑。</span></span><br><span class="line"><span class="string">用一种方法，最好只有一种方法来做一件事。</span></span><br><span class="line"><span class="string">虽然一开始这种方法并不是显而易见的，但谁叫你不是Python之父呢。</span></span><br><span class="line"><span class="string">做比不做好，但立马去做有时还不如不做。</span></span><br><span class="line"><span class="string">如果实现很难说明，那它是一个坏想法。</span></span><br><span class="line"><span class="string">如果实现容易解释，那它有可能是个好想法。</span></span><br><span class="line"><span class="string">命名空间大法好，同志们要多多搞！</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第三章-注释以及python之禅&quot;&gt;&lt;a href=&quot;#第三章-注释以及python之禅&quot; class=&quot;headerlink&quot; title=&quot;第三章 注释以及python之禅&quot;&gt;&lt;/a&gt;第三章 注释以及python之禅&lt;/h2&gt;&lt;h3 id=&quot;3-1-注释&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python教程(二)：变量与字符串</title>
    <link href="http://example.com/2021/03/07/Python%E6%95%99%E7%A8%8B(%E4%BA%8C)%EF%BC%9A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2021/03/07/Python%E6%95%99%E7%A8%8B(%E4%BA%8C)%EF%BC%9A%E5%8F%98%E9%87%8F%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-03-06T21:17:39.000Z</published>
    <updated>2021-03-09T09:13:12.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二章-变量和数据类型"><a href="#第二章-变量和数据类型" class="headerlink" title="第二章 变量和数据类型"></a>第二章 变量和数据类型</h2><h3 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h3><h4 id="2-1-1-变量的命名与使用"><a href="#2-1-1-变量的命名与使用" class="headerlink" title="2.1.1 变量的命名与使用"></a>2.1.1 变量的命名与使用</h4><p>在python中使用变量时，需要遵守一些规则和指南。违反这些规则将引发错误，而指南则旨在让你的代码更通俗易懂，请牢记下面有关变量的规则。</p><ul><li>变量名只能包含字母、数字和下划线。变量名可以用字母和下划线开头，但不能用数字开头。例如：message_1 正确，1_message就是错误的。</li><li>变量名不能包含空格，但可以使用下划线来分隔其中的单词。</li><li>不要将python的关键字和函数名用作变量名，即不要使用python的保留的特殊字符。</li><li>变量名应简短且具有描述性，例：name比n好</li><li>慎用小写字母l和大写字母O,因为有可能错看成数字1和0</li></ul><h3 id="2-2-字符串-String"><a href="#2-2-字符串-String" class="headerlink" title="2.2  字符串(String)"></a>2.2  字符串(String)</h3><p>字符串就是一系列字符。在python中用引号引起来的都是字符串，其中引号可以使单引号也可以是双引号。</p><h4 id="2-2-1-改变字符串大小写"><a href="#2-2-1-改变字符串大小写" class="headerlink" title="2.2.1 改变字符串大小写"></a>2.2.1 改变字符串大小写</h4><ul><li><p>title() 方法 将字符串首字母大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;ada lovelace&#x27;</span></span><br><span class="line">print(name.title())</span><br><span class="line">&gt;&gt;&gt;Ada Lovelace</span><br></pre></td></tr></table></figure></li><li><p>upper() </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;ada lovelace&#x27;</span></span><br><span class="line">print(name.upper())</span><br><span class="line">&gt;&gt;&gt;Ada Lovelace</span><br></pre></td></tr></table></figure></li><li><p>lower()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Ada Love&#x27;</span></span><br><span class="line">print(name.lower())</span><br><span class="line">&gt;&gt;&gt;ada love</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-2-合并-拼接-字符串"><a href="#2-2-2-合并-拼接-字符串" class="headerlink" title="2.2.2 合并(拼接)字符串"></a>2.2.2 合并(拼接)字符串</h4><p>​    在很多情况下需要合并字符串。可以使用 + 来进行连接操作，注意拼接的变量必须都为string类型。注：此方法又称为 “万恶的加号”,因为使用加号连接2个字符串会调用静态函数string_concat(register PyStringObject *a ,register PyObject * b),在这个函数中会开辟一块大小是a+b的内存的和的存储单元，然后将a,b字符串拷贝进去。如果是n个字符串相连  那么会开辟n-1次内存，是非常耗费资源的。也可以使用str.join连接字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_str = <span class="string">&#x27;tony&#x27;</span></span><br><span class="line">last_str = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">full_str = first_str + last_str</span><br><span class="line">print(full_str)</span><br><span class="line">&gt;&gt;&gt;tonyjack</span><br></pre></td></tr></table></figure><h4 id="2-2-3-去除空格"><a href="#2-2-3-去除空格" class="headerlink" title="2.2.3 去除空格"></a>2.2.3 去除空格</h4><p>​    str.strip():删除字符串两边的字符，括号内为要删除的内容，默认为空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;  hello  &#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>.strip())</span><br><span class="line">&gt;&gt;&gt;hello</span><br></pre></td></tr></table></figure><p>​    str.lstrip():删除字符串左边的指定字符，括号的写入指定字符，默认空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;  hello  &#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>.lstrip())</span><br><span class="line">&gt;&gt;&gt;hello  <span class="comment">#此处有空格</span></span><br></pre></td></tr></table></figure><p>​    str.rstrip():删除字符串右边的指定字符，括号的写入指定字符，默认空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;  hello  &#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>.rstrip())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> hello</span><br></pre></td></tr></table></figure><h4 id="2-2-4-复制字符串"><a href="#2-2-4-复制字符串" class="headerlink" title="2.2.4 复制字符串"></a>2.2.4 复制字符串</h4><p>​    在编码过程成会经常遇到将A变量赋值给B的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str_1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str_2 = str_1</span><br><span class="line">print(str_2)</span><br><span class="line">&gt;&gt;&gt;hello</span><br></pre></td></tr></table></figure><h4 id="2-2-5-查找字符串"><a href="#2-2-5-查找字符串" class="headerlink" title="2.2.5 查找字符串"></a>2.2.5 查找字符串</h4><p>​    str.index\str.find，两个方法功能相同，都是查找字符串，而区别在于find()查找失败会返回-1，不会影响程序运行。一般用find!=-1或者find&gt;-1来作为判断条件。str.index:检测字符串中是否包含子字符串str，可指定范围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str_1 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">print(str_1.index(<span class="string">&#x27;l&#x27;</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">str_1.index(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">Traceback（most recent call last）:</span><br><span class="line">File <span class="string">&quot;&lt;pyshell#40&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">a.index(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br><span class="line">--------------------------------------</span><br><span class="line">str_2 = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">str_2.find(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">str_2.find(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;-<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="2-2-6-是否包含指定字符串"><a href="#2-2-6-是否包含指定字符串" class="headerlink" title="2.2.6 是否包含指定字符串"></a>2.2.6 是否包含指定字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="2-2-7-字符串长度"><a href="#2-2-7-字符串长度" class="headerlink" title="2.2.7 字符串长度"></a>2.2.7 字符串长度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">print(<span class="built_in">len</span>(<span class="built_in">str</span>)) <span class="comment"># len方法用来计算长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span></span><br></pre></td></tr></table></figure><h4 id="2-2-8-字符串切片"><a href="#2-2-8-字符串切片" class="headerlink" title="2.2.8 字符串切片"></a>2.2.8 字符串切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;hello_world&#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">3</span>])    <span class="comment">#截取第一位到第三位的字符</span></span><br><span class="line">print(<span class="built_in">str</span>[:])      <span class="comment">#截取字符串的全部字符</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">6</span>:])     <span class="comment">#截取第七个字符到结尾</span></span><br><span class="line">print(<span class="built_in">str</span>[:-<span class="number">3</span>])    <span class="comment">#截取从头开始到倒数第三个字符之前</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">2</span>])      <span class="comment">#截取第三个字符</span></span><br><span class="line">print(<span class="built_in">str</span>[-<span class="number">1</span>])     <span class="comment">#截取倒数第一个字符</span></span><br><span class="line">print(<span class="built_in">str</span>[::-<span class="number">1</span>])   <span class="comment">#创造一个与原字符串顺序相反的字符串</span></span><br><span class="line">print(<span class="built_in">str</span>[-<span class="number">3</span>:-<span class="number">1</span>])  <span class="comment">#截取倒数第三位与倒数第一位之前的字符</span></span><br><span class="line">print(<span class="built_in">str</span>[-<span class="number">3</span>:])    <span class="comment">#截取倒数第三位到结尾</span></span><br><span class="line">print(<span class="built_in">str</span>[:-<span class="number">5</span>:-<span class="number">3</span>]) <span class="comment">#逆序截取，截取倒数第五位数与倒数第三位数之间</span></span><br></pre></td></tr></table></figure><h3 id="2-3-数字"><a href="#2-3-数字" class="headerlink" title="2.3 数字"></a>2.3 数字</h3><p>​    在编程中，经常使用数字来表示可视化数据、存储web信息、记录单据数量等。。。 Python根据数字的用法以不同的处理方式处理他们。下面就先来看看python有哪些数字类型以及是如何管理的。</p><h4 id="2-3-1-数据类型"><a href="#2-3-1-数据类型" class="headerlink" title="2.3.1 数据类型"></a>2.3.1 数据类型</h4><ul><li>整数（int）：在python3中只有一种整数类型 int，表示长整形，没有python2中的long </li><li>浮点数 （float）</li><li>布尔类型（bool）</li><li>复数（complex）</li></ul><h4 id="2-3-2-运算符"><a href="#2-3-2-运算符" class="headerlink" title="2.3.2 运算符"></a>2.3.2 运算符</h4><ol><li><p>算术运算符</p><p>以下假设两个变量，a=10,b=31；</p><table><thead><tr><th align="center">运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td>加-两个对象相加</td><td>a+b 输出41</td></tr><tr><td align="center">-</td><td>减-得到负数或是一个数减去另一个数</td><td>b-a 输出21</td></tr><tr><td align="center">*</td><td>乘-两个数相乘或是返回一个被重复若干次的字符串</td><td>a*b 输出310</td></tr><tr><td align="center">/</td><td>除 - x 除以 y</td><td>b/a 输出3.1</td></tr><tr><td align="center">%</td><td>取模 - 返回除法的余数</td><td>b%a 输出1</td></tr><tr><td align="center">**</td><td>幂 - 返回x的y次幂</td><td>a**b 输出10的31次方</td></tr><tr><td align="center">//</td><td>取整除 - 向下取接近商的整数</td><td>9//2 输出4   -9//2 输出-5</td></tr></tbody></table></li><li><p>比较运算符</p><table><thead><tr><th align="center">运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">==</td><td>等于 - 比较对象是否相等</td><td>(a == b) 返回 False。</td></tr><tr><td align="center">!=</td><td>不等于 - 比较两个对象是否不相等</td><td>(a != b) 返回 True。</td></tr><tr><td align="center">&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td align="center">&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td>(a &lt; b) 返回 True。</td></tr><tr><td align="center">&gt;=</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;= b) 返回 False。</td></tr><tr><td align="center">&lt;=</td><td>小于等于 - 返回x是否小于等于y。</td><td>(a &lt;= b) 返回 True。</td></tr></tbody></table></li><li><p>赋值运算符</p><table><thead><tr><th align="center">运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="center">+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td align="center">-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td align="center">*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td align="center">/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td align="center">%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td align="center">**=</td><td>幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr><tr><td align="center">//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr><tr><td align="center">:=</td><td>海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</td><td>在这个示例中，赋值表达式可以避免调用 len() 两次:<code>if (n := len(a)) &gt; 10:    print(f&quot;List is too long (&#123;n&#125; elements, expected &lt;= 10)&quot;)</code></td></tr></tbody></table></li><li><p>运算符优先级</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，求余数和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">== !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += *= **=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table></li></ol><h4 id="2-3-3-数字类型转换"><a href="#2-3-3-数字类型转换" class="headerlink" title="2.3.3 数字类型转换"></a>2.3.3 数字类型转换</h4><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><ul><li><strong>int(x)</strong> 将x转换为一个整数</li><li><strong>float(x)</strong> 将x转换为一个浮点数</li><li><strong>complex(x)</strong> 将x转化到一个复数，实数部分为x，虚数为0</li><li><strong>complex(x)</strong> 将x,y转换到一个复数中，x为实数，y为虚数</li></ul><h4 id="2-3-4-数学函数"><a href="#2-3-4-数学函数" class="headerlink" title="2.3.4 数学函数"></a>2.3.4 数学函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>(x)<span class="comment">#返回数字绝对值 例：abs(-10) 返回 10</span></span><br><span class="line">cell(X)<span class="comment">#返回数字的上入整数 例：cell(4.1) 返回5</span></span><br><span class="line">cmp(x,y)<span class="comment">#Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换。</span></span><br><span class="line">exp(x)<span class="comment">#返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</span></span><br><span class="line">fabs(X)<span class="comment">#返回数字的绝对值，如math.fabs(-10) 返回10.0</span></span><br><span class="line">floor(x)<span class="comment">#返回数字的下舍整数，如math.floor(4.9)返回 4</span></span><br><span class="line">log(X)<span class="comment">#如math.log(math.e)返回1.0,math.log(100,10)返回2.0</span></span><br><span class="line">log10(x)<span class="comment">#返回以10为基数的x的对数</span></span><br><span class="line"><span class="built_in">max</span>(x1, x2,...)<span class="comment">#返回给定参数的最大值，参数可以为序列。</span></span><br><span class="line"><span class="built_in">min</span>(x1, x2,...)<span class="comment">#返回给定参数的最小值，参数可以为序列。</span></span><br><span class="line">modf(x)<span class="comment">#返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</span></span><br><span class="line"><span class="built_in">pow</span>(x, y)<span class="comment">#x**y 运算后的值。</span></span><br><span class="line"><span class="built_in">round</span>(x [,n])<span class="comment">#返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</span></span><br><span class="line">sqrt(x)<span class="comment">#返回数字x的平方根。</span></span><br><span class="line">choice(seq)<span class="comment">#从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</span></span><br><span class="line">randrange ([start,] stop [,step])<span class="comment">#从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</span></span><br><span class="line">random()<span class="comment">#随机生成下一个实数，它在[0,1)范围内。</span></span><br><span class="line">seed([x])<span class="comment">#改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</span></span><br><span class="line">shuffle(lst)<span class="comment">#将序列的所有元素随机排序</span></span><br><span class="line">uniform(x, y)<span class="comment">#随机生成下一个实数，它在[x,y]范围内。</span></span><br><span class="line">acos(x)<span class="comment">#返回x的反余弦弧度值。</span></span><br><span class="line">asin(x)<span class="comment">#返回x的反正弦弧度值。</span></span><br><span class="line">atan(x)<span class="comment">#返回x的反正切弧度值。</span></span><br><span class="line">atan2(y, x)<span class="comment">#返回给定的 X 及 Y 坐标值的反正切值。</span></span><br><span class="line">cos(x)<span class="comment">#返回x的弧度的余弦值。</span></span><br><span class="line">hypot(x, y)<span class="comment">#返回欧几里德范数 sqrt(xx + yy)。</span></span><br><span class="line">sin(x)<span class="comment">#返回的x弧度的正弦值。</span></span><br><span class="line">tan(x)<span class="comment">#返回x弧度的正切值。</span></span><br><span class="line">degrees(x)<span class="comment">#将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</span></span><br><span class="line">radians(x)<span class="comment">#将角度转换为弧度</span></span><br><span class="line">pi<span class="comment">#数学常量pi(圆周率)</span></span><br><span class="line">e<span class="comment">#数学常量e，e即自然常数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第二章-变量和数据类型&quot;&gt;&lt;a href=&quot;#第二章-变量和数据类型&quot; class=&quot;headerlink&quot; title=&quot;第二章 变量和数据类型&quot;&gt;&lt;/a&gt;第二章 变量和数据类型&lt;/h2&gt;&lt;h3 id=&quot;2-1-变量&quot;&gt;&lt;a href=&quot;#2-1-变量&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python教程(一)：环境搭建</title>
    <link href="http://example.com/2021/03/07/Python%E6%95%99%E7%A8%8B(%E4%B8%80)%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2021/03/07/Python%E6%95%99%E7%A8%8B(%E4%B8%80)%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-03-06T21:11:17.000Z</published>
    <updated>2021-03-06T14:03:34.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-Python介绍以及环境搭建"><a href="#第一章-Python介绍以及环境搭建" class="headerlink" title="第一章   Python介绍以及环境搭建"></a>第一章   Python介绍以及环境搭建</h2><h3 id="1-1-Python-简介"><a href="#1-1-Python-简介" class="headerlink" title="1.1  Python 简介"></a>1.1  Python 简介</h3><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p><ul><li><strong>Python 是一种解释型语言：</strong> 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言</li><li><strong>Python 是交互式语言：</strong> 这意味着，您可以在一个 Python 提示符 <strong>&gt;&gt;&gt;</strong> 后直接执行代码</li><li><strong>Python 是面向对象语言：</strong> 这意味着Python支持面向对象的风格或代码封装在对象的编程技术</li><li><strong>Python 是简单注意思想语言：</strong>Python是一种代表简单主义思想的语言。简单贯穿python语言的全程，阅读一个良好的python程序就像在读英语一样，它使你能够专注于解决问题而不是研究语言本身是什么</li><li><strong>Python 是易学的语言：</strong>python具有极其简单的说明文档，极易上手学习</li><li><strong>Python 是快速的语言：</strong>python的底层是用 C 语言写的，很多标准库和第三方库也都是用 C 写的，运行速度非常快</li><li><strong>Python 是可移植的语言：</strong>python在于它的开源本质，已经被移植在许多平台上</li></ul><h3 id="1-2-Python环境搭建"><a href="#1-2-Python环境搭建" class="headerlink" title="1.2 Python环境搭建"></a>1.2 Python环境搭建</h3><p>由于python的跨平台性，python可以运行在不同的操作系统下，Windows、Linux、macOS。由于本人没有接触过macxitong ,故本节将教会大家如何在Windows、Linux中安装python环境。所用的python版本为3.7.6，截止于本文编写时间最新python版本为3.9.2。</p><h4 id="1-2-1-Windows下的python安装"><a href="#1-2-1-Windows下的python安装" class="headerlink" title="1.2.1 Windows下的python安装"></a>1.2.1 Windows下的python安装</h4><ol><li><p>在<a href="https://www.python.org/downloads/windows/">python的官网</a>下载对应的python版本</p><p>64位下载<img src="C:\Users\chine\AppData\Roaming\Typora\typora-user-images\image-20210225202703122.png" alt="image-20210225202703122"></p><p>32位下载<img src="C:\Users\chine\AppData\Roaming\Typora\typora-user-images\image-20210225202717623.png" alt="image-20210225202717623"></p></li><li><p>下载完成后安装，安装时一定要勾选Add python to PATH 添加路径（如果不勾选则需要安装完成后自己添加环境变量）</p><p><img src="https://img2018.cnblogs.com/blog/48590/201811/48590-20181130112038017-92851817.png" alt="img"></p></li><li><p>不改变默认进行Next下一步，选择一个安装路径，点击Install进行安装，等待进度条安装完毕，点击close关闭。</p><p><img src="C:\Users\chine\AppData\Roaming\Typora\typora-user-images\image-20210225203427451.png" alt="image-20210225203427451"></p><p><img src="C:\Users\chine\AppData\Roaming\Typora\typora-user-images\image-20210225203437898.png" alt="image-20210225203437898"></p></li><li><p>验证：运行cmd</p><p>输入 python -V 若出现python版本则说明安装成功。</p></li></ol><h4 id="1-2-2-Linux下的python安装"><a href="#1-2-2-Linux下的python安装" class="headerlink" title="1.2.2 Linux下的python安装"></a>1.2.2 Linux下的python安装</h4><p>注意在linux会自带一个python版本，千万不要卸载或者强制卸载原来自带的python，具体原因请自行查看度娘。</p><ol><li><p>下载Python3.7.6：</p><p>到官网下载<a href="https://www.python.org,在downloads中可以看到不同的版本./">https://www.python.org，在downloads中可以看到不同的版本。</a></p><p>终端窗口中命令行下载为：wget <a href="https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tgz">https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tgz</a></p><p>然后解压缩，tar -zxvf Pytho-3.7.6.tgz</p></li><li><p>获取root权限：</p><p>sudo passwd root</p><p>提示输入新的UNIX密码，输入两遍。</p><p>使用 su 命令切换到root用户，使用 whoami 命令可以查看当前用户为root</p></li><li><p>安装：</p><ul><li><p>建立存放python3对的文件夹： mkdir /usr/local/python376</p></li><li><p>执行配置文件，编译，编译安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-<span class="number">3.7</span><span class="number">.6</span></span><br><span class="line">./configure --prefix=/usr/local/python376</span><br><span class="line"> make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>建立软连接</p><p>ln -s /usr/local/python3/bin/python3.7 /usr/bin/python376</p><p> 　ln -s /usr/local/python3/bin/pip3.7 /usr/bin/pip376</p></li></ul><ol start="4"><li><p>测试是否安装成功，是否可用。</p><p>输入Python376，显示版本号，进入&gt;&gt;&gt;状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello world!</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure><p>安装完成。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章-Python介绍以及环境搭建&quot;&gt;&lt;a href=&quot;#第一章-Python介绍以及环境搭建&quot; class=&quot;headerlink&quot; title=&quot;第一章   Python介绍以及环境搭建&quot;&gt;&lt;/a&gt;第一章   Python介绍以及环境搭建&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>初来乍到</title>
    <link href="http://example.com/2021/01/24/hello-world/"/>
    <id>http://example.com/2021/01/24/hello-world/</id>
    <published>2021-01-24T00:06:48.000Z</published>
    <updated>2021-03-06T13:12:36.177Z</updated>
    
    <content type="html"><![CDATA[<p>初来乍到，简介一番，莫嫌啰嗦。</p><p>开此博客，仅为分享，莫嫌乏味。</p><h3 id="俗人"><a href="#俗人" class="headerlink" title="俗人"></a>俗人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是一庸俗之人</span><br><span class="line">鲜衣 怒马 功名 心上人</span><br></pre></td></tr></table></figure><h3 id="鲜衣怒马"><a href="#鲜衣怒马" class="headerlink" title="鲜衣怒马"></a>鲜衣怒马</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虽已而立之岁却依旧鲜衣怒马，挥斥方遒</span><br></pre></td></tr></table></figure><h3 id="功名"><a href="#功名" class="headerlink" title="功名"></a>功名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">纵然前路荆棘遍野，亦将坦然无惧仗剑随行</span><br></pre></td></tr></table></figure><h3 id="心上人"><a href="#心上人" class="headerlink" title="心上人"></a>心上人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两姓联姻，一堂缔约，良缘永结，匹配同称</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;初来乍到，简介一番，莫嫌啰嗦。&lt;/p&gt;
&lt;p&gt;开此博客，仅为分享，莫嫌乏味。&lt;/p&gt;
&lt;h3 id=&quot;俗人&quot;&gt;&lt;a href=&quot;#俗人&quot; class=&quot;headerlink&quot; title=&quot;俗人&quot;&gt;&lt;/a&gt;俗人&lt;/h3&gt;&lt;figure class=&quot;highlight py</summary>
      
    
    
    
    
    <category term="others" scheme="http://example.com/tags/others/"/>
    
  </entry>
  
</feed>
